# -*- coding: utf-8 -*-
"""Symbolic_Parser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1faRlCvBg-c9p5bVjfuuv12q8rCpofgND
"""

!pip install sympy --quiet

import pandas as pd
import sympy
from sympy.parsing.sympy_parser import (
    parse_expr, standard_transformations, implicit_multiplication_application,
    convert_xor, implicit_application
)
import json
import os
import re

#STEP 1: LOAD CSV FROM FILES SIDEBAR
filename = "/content/Feynman_csv_edit.csv"

if not os.path.exists(filename):
    raise FileNotFoundError("‚ùå Please upload 'Feynman_csv_edit' in the Files sidebar first.")

df = pd.read_csv(filename)
transformations = standard_transformations + (
    implicit_multiplication_application,
    convert_xor,
    implicit_application
)

# Define a more precise set of symbols that *require* the _sym suffix
# These are multi-character identifiers or those with underscores/numbers
# that SymPy's default parser might misinterpret.
SYMBOLS_REQUIRING_SYM_SUFFIX = [
    r'Volt', r'mob', r'mom', r'Bx', r'By', r'Bz', r'Nn',
    r'Int_0', r'k_spring', r'mu_drift', r'rho_c_0', r'sigma_den', r'A_vec',
    r'omega_0', r'p_d', r'n_0', r'n_rho', r'm_rho', r'g_', r'kb', r'Ef', r'Pwr',
    r'm_0', # Explicitly add m_0
    r'q1', r'q2', r'I', # <--- ADDED 'I' HERE
    r'I1', r'I2', # Explicitly add numbered I
    r'pr' # If pr is a single symbol, not p*r
]

# Regex for subscripted variables (e.g., x1, V2, theta1)
SUBSCRIPTED_SYMBOLS_REQUIRING_SYM_SUFFIX = [
    r'V([0-9])', r'T([0-9])', r'r([0-9])', r'x([0-9])', r'y([0-9])',
    r'z([0-9])', r'm([0-9])', r'd([0-9])', r'theta([0-9])',
]

#Helper: Fix common variable merge errors and handle specific identifiers
def clean_formula_string(formula):
    # Apply _sym suffix for specific multi-character identifiers
    for sym_name in SYMBOLS_REQUIRING_SYM_SUFFIX:
        formula = re.sub(r'\b' + sym_name + r'\b', sym_name + '_sym', formula)

    # Apply _sym suffix for subscripted identifiers
    for sym_pattern in SUBSCRIPTED_SYMBOLS_REQUIRING_SYM_SUFFIX:
        formula = re.sub(r'\b(' + sym_pattern + r')\b', r'\1_sym', formula)

    # Special handling for pi as it's a constant
    formula = re.sub(r'\bpi\b', 'pi_sym', formula) # Temporarily rename pi to pi_sym
    formula = re.sub(r'\be\b', 'e_sym', formula) # Temporarily rename e to e_sym

    return formula

#Grammar Formatter (cleaned up for correctness)
def format_expr_as_grammar(expr):
    if isinstance(expr, sympy.Symbol):
        # Revert temporary names back to original for output
        sym_name = str(expr)
        sym_name = re.sub(r'_sym$', '', sym_name) # Remove _sym suffix if present
        return f"id({sym_name})"
    elif isinstance(expr, sympy.Number):
        return f"const({float(expr)})"
    elif isinstance(expr, sympy.Function):
        name = expr.func.__name__
        args = [format_expr_as_grammar(arg) for arg in expr.args]
        return f"{name.lower()}({', '.join(args)})"
    elif isinstance(expr, sympy.Basic):
        args = list(expr.args)
        op_map = {
            'Add': 'add',
            'Mul': 'mul',
            'Pow': 'pow',
        }
        op = type(expr).__name__
        mapped_op = op_map.get(op, op.lower())

        if len(args) == 1: # Unary operations or functions with one arg
            return f"{mapped_op}({format_expr_as_grammar(args[0])})"
        elif len(args) == 2: # Binary operations
            return f"{mapped_op}({format_expr_as_grammar(args[0])}, {format_expr_as_grammar(args[1])})"
        else: # N-ary operations (like add(a, b, c))
            # Nested application for N-ary operations to ensure binary tree structure
            nested = format_expr_as_grammar(args[0])
            for arg in args[1:]:
                nested = f"{mapped_op}({nested}, {format_expr_as_grammar(arg)})"
            return nested
    else:
        return str(expr)

#Variable Extractor ===
def extract_vars(row):
    variables = {}
    for i in range(1, 11):
        name = row.get(f'v{i}_name')
        if pd.isna(name): continue
        low = row.get(f'v{i}_low')
        high = row.get(f'v{i}_high')
        variables[name] = {'low': low, 'high': high, 'type': 'variable'}
    return variables

#Known physics constants (as floats for comparison)
known_physics_constants = {
    'pi': float(sympy.pi.evalf()),
    'e': float(sympy.E.evalf()),
    'c': 3.0e8,
    'h': 6.62607015e-34,
    'G': 6.67430e-11,
    'k': 1.380649e-23,
    'R': 8.314,
    'g': 9.8
}

# Define custom symbols for SymPy to recognize
# Keys are the string representations SymPy will see (some with _sym suffixes)
# Values are the actual sympy.Symbol objects (without _sym in their name for final output)
custom_symbols_map_for_parsing = {
    # Symbols requiring _sym suffix in clean_formula_string
    'Volt_sym': sympy.Symbol('Volt'),
    'mob_sym': sympy.Symbol('mob'),
    'mom_sym': sympy.Symbol('mom'),
    'Bx_sym': sympy.Symbol('Bx'),
    'By_sym': sympy.Symbol('By'),
    'Bz_sym': sympy.Symbol('Bz'),
    'Nn_sym': sympy.Symbol('Nn'),
    'Int_0_sym': sympy.Symbol('Int_0'),
    'k_spring_sym': sympy.Symbol('k_spring'),
    'mu_drift_sym': sympy.Symbol('mu_drift'),
    'rho_c_0_sym': sympy.Symbol('rho_c_0'),
    'sigma_den_sym': sympy.Symbol('sigma_den'),
    'A_vec_sym': sympy.Symbol('A_vec'),
    'omega_0_sym': sympy.Symbol('omega_0'),
    'p_d_sym': sympy.Symbol('p_d'),
    'n_0_sym': sympy.Symbol('n_0'),
    'n_rho_sym': sympy.Symbol('n_rho'),
    'm_rho_sym': sympy.Symbol('m_rho'),
    'g__sym': sympy.Symbol('g_'),
    'kb_sym': sympy.Symbol('kb'),
    'Ef_sym': sympy.Symbol('Ef'),
    'Pwr_sym': sympy.Symbol('Pwr'),
    'm_0_sym': sympy.Symbol('m_0'),
    'q1_sym': sympy.Symbol('q1'),
    'q2_sym': sympy.Symbol('q2'),
    'I_sym': sympy.Symbol('I'),
    'I1_sym': sympy.Symbol('I1'),
    'I2_sym': sympy.Symbol('I2'),
    'pr_sym': sympy.Symbol('pr'),
    'pi_sym': sympy.pi,
    'e_sym': sympy.E,

    # Subscripted variables (V1, T1, x1 etc.)
    'V1_sym': sympy.Symbol('V1'), 'V2_sym': sympy.Symbol('V2'),
    'T1_sym': sympy.Symbol('T1'), 'T2_sym': sympy.Symbol('T2'),
    'r1_sym': sympy.Symbol('r1'), 'r2_sym': sympy.Symbol('r2'),
    'x1_sym': sympy.Symbol('x1'), 'x2_sym': sympy.Symbol('x2'), 'x3_sym': sympy.Symbol('x3'),
    'y1_sym': sympy.Symbol('y1'), 'y2_sym': sympy.Symbol('y2'), 'y3_sym': sympy.Symbol('y3'),
    'z1_sym': sympy.Symbol('z1'), 'z2_sym': sympy.Symbol('z2'),
    'm1_sym': sympy.Symbol('m1'), 'm2_sym': sympy.Symbol('m2'),
    'd1_sym': sympy.Symbol('d1'), 'd2_sym': sympy.Symbol('d2'),
    'theta1_sym': sympy.Symbol('theta1'), 'theta2_sym': sympy.Symbol('theta2'),

    # Common single-character or simple multi-character symbols (no _sym suffix needed)
    'q': sympy.Symbol('q'), 'B': sympy.Symbol('B'), 'p': sympy.Symbol('p'),
    'omega': sympy.Symbol('omega'), 'theta': sympy.Symbol('theta'),
    'F': sympy.Symbol('F'), 'alpha': sympy.Symbol('alpha'),
    'kappa': sympy.Symbol('kappa'), 'epsilon': sympy.Symbol('epsilon'),
    'chi': sympy.Symbol('chi'), 'U': sympy.Symbol('U'),
    'm': sympy.Symbol('m'), 'v': sympy.Symbol('v'),
    'u': sympy.Symbol('u'), 'w': sympy.Symbol('w'),
    'sigma': sympy.Symbol('sigma'), 'H': sympy.Symbol('H'),
    'M': sympy.Symbol('M'), 'Y': sympy.Symbol('Y'),
    'A': sympy.Symbol('A'), 'n': sympy.Symbol('n'),
    'd': sympy.Symbol('d'), # 'd' as a single symbol
    'C': sympy.Symbol('C'), 't': sympy.Symbol('t'),
    'E_n': sympy.Symbol('E_n'),
    'Jz': sympy.Symbol('Jz'),
    'r': sympy.Symbol('r'),
    'c': sympy.Symbol('c'),
    'h': sympy.Symbol('h'),
    'T': sympy.Symbol('T'),
    'gamma': sympy.Symbol('gamma'),
    'beta': sympy.Symbol('beta'),
    'delta': sympy.Symbol('delta'),
    'mu': sympy.Symbol('mu'),
}

# Merge custom symbols with known constants to form the complete namespace for parsing
parsing_namespace = {str(s): s for s in custom_symbols_map_for_parsing.values()}
for k, v in known_physics_constants.items():
    if k not in parsing_namespace and k not in ['pi', 'e']:
        parsing_namespace[k] = sympy.Symbol(k)

parsing_namespace['pi'] = sympy.pi
parsing_namespace['e'] = sympy.E


#STEP 2: BUILD PARSE TREE DATA STRUCTURES ---
parsed_entries = []
unparseable_equations = []
parsed_examples = []
total_equations_processed = 0 # Initialize counter

for idx, row in df.iterrows():
    formula_str = row.get('Formula')
    output_var = row.get('Output')

    # Increment counter for each row attempted
    total_equations_processed += 1

    if pd.isna(formula_str) or pd.isna(output_var):
        # Skip rows without a formula or output, but still count them as "processed"
        # as they were part of the dataframe iteration.
        continue

    formula_str = formula_str.replace("^", "**")
    formula_str_cleaned = clean_formula_string(formula_str)

    try:
        expr = parse_expr(formula_str_cleaned, transformations=transformations,
                          local_dict=parsing_namespace, evaluate=False)
        formatted_tree = format_expr_as_grammar(expr)
        parsed_examples.append((formula_str, formatted_tree))
    except Exception as e:
        unparseable_equations.append((idx, formula_str, str(e)))
        expr = None
        formatted_tree = None

    variables = extract_vars(row)
    known_vars = set(variables.keys())
    constants = {}

    if expr:
        all_symbols = {str(s) for s in expr.free_symbols}
        actual_symbols = set()
        for s in all_symbols:
            original_sym_name = re.sub(r'_sym$', '', s)
            actual_symbols.add(original_sym_name)

        const_symbols = actual_symbols - known_vars
        for sym in const_symbols:
            if sym in known_physics_constants:
                constants[sym] = {
                    'type': 'constant',
                    'value': known_physics_constants[sym]
                }
            elif sym not in known_vars:
                constants[sym] = {'type': 'unknown_constant', 'value': None}


    parsed_entries.append({
        'row': int(idx),
        'output': output_var,
        'original_formula': formula_str,
        'symbolic_parse_tree': formatted_tree,
        'variables': variables,
        'constants': constants
    })

#STEP 3: SAVE TO JSON IN CONTENT
output_file = "/content/feynman_parse_trees_7.json"
with open(output_file, "w") as f:
    json.dump(parsed_entries, f, indent=2)

print(f"‚úÖ Symbolic parse complete. File saved as: {output_file}\n")

# STEP 4: PRINT FAILED PARSES ---
if unparseable_equations:
    print(f"‚ùå {len(unparseable_equations)} equations could not be parsed out of {total_equations_processed} total equations:\n")
    for row, formula, error in unparseable_equations:
        print(f"[Row {row}] {formula} ‚Üí Error: {error}")
else:
    print(f"üéâ All {total_equations_processed} equations parsed successfully!")

# STEP 5: PRINT SUCCEEDING FORMULAS SIDE-BY-SIDE
print(f"\n Showing all successfully parsed expressions:\n")
for original, parsed in parsed_examples:
    print(f"{original} ‚Üí\n  {parsed}\n")